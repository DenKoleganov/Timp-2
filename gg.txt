main.cpp



#include "stdafx.h" 
#include <iostream> 
#include "Encode.h" 
#include <stdexcept> 
#include <Windows.h> 
#include <ctype.h> 
#include <string> 
using namespace std; 
int main() 
{ 
	SetConsoleCP(1251); 
	string k,input; 
	unsigned int key; 
	int i = 0, l = 0, max=26; 
	char answer = '1'; 
	cout « "Input key." « endl; 
	cin » key; 
	try 
	{ 
		if ((key > max) | (key<=0)) 
			throw 1; 
		while (answer!='0') 
		{ 
			cout « "Input text." « endl; 
			cin.ignore(); 
			getline (cin, k) ; 
			cout « "Do you want to encrypt or decrypt the text?" « endl; 
			cout « "Encrypt - 1. Decrypt - 2. Exit - 0" « endl; 
			cin » answer; 
			if (answer == '1') 
			{ 
				Encode x(key); 
				input = x.Encrypt(k); 
			} 
			else if (answer == '2') 
			{ 
				Encode x(key); 
				input = x.Decrypt(k); 
			} 
			else if (answer=='0') 
			{ 
			} 
			else 
				throw 5; 
			if(answer!='0') 
				cout « input « endl; 
		} 
	} 
	catch (int error) 
	{ 
		if (error == 1) 
		{ 
			cerr « "Key input error." « endl; 
			return 1; 
		} 
		else 
			if (error == 2) 
			{ 
				cerr « "Text input error. Cannot enter numbers." « endl; 
				return 2; 
			} 

			else 
				if (error == 3) 
				{ 
					cerr « "Text input error. You cannot enter non - English characters." « endl; 
					return 3; 
				} 
				else 
					if (error == 4) 
					{ 
						cerr « "Text input error." « endl; 
						return 4; 
					} 
					{ 
						cerr « "The answer to the question is incorrect." « endl; 
						return 5; 
					} 
	} 
	return 0; 
}



ceasor.cpp




#include "ceasor.h"
#include <string> 
#include <ctype.h> 
#include <iostream> 
using namespace std; 


string Encode::Encrypt(const string Text) 
{ 
	Encrypt_Error(Text); 
	int i = 0; 
	text=Deleted(Text); 
	text=Up(text); 
	while (text[i] != '\0') 
	{ 
		if (text[i]+Key>'Z') 
			text[i] = text[i] - (max - Key); 
		else 
			text[i] = text[i] + Key; 
		i++; 
	} 
	return string(text); 
} 

string Encode::Decrypt(const string Text) 
{ 
	Decrypt_Error(Text); 
	int i = 0; 
	text = Text; 
	while (text[i] != '\0') 
	{ 
		if ((text[i] - Key)<'A') 
			text[i] = text[i] + (max - Key); 
		else 
			text[i] = text[i] - Key; 
		i++; 
	} 
	return string(text); 
} 

void Encode::Encrypt_Error(string Text) 
{ 
	int i = 0; 
	while (Text[i] != '\0') 
	{ 
		if ((Text[i] >= '0') && (Text[i] <= '9')) 
			throw 2; 
		i++; 
	} 
	i = 0; 
	while (Text[i] != '\0') 
	{ 
		if ( ( (Text[i] >= 'À' ) && (Text[i] <= 'ÿ') ) | (Text[i] <= '¨') | (Text[i] <= '¸')) 
			throw 3; 
		i++; 
	} 
} 

void Encode::Decrypt_Error(const string Text) 
{ 
	int i = 0; 
	while (Text[i] != '\0') 
	{ 
		if ((Text[i] >= 'A') && (Text[i] <= 'Z')) 
		{ 
		} 
		else 
			throw 4; 
		i++; 
	} 
} 

string Encode::Deleted(string Text) 
{ 
	int i = 0; 
	text = Text; 
	while (text[i] != '\0') 
	{ 
		if (((text[i] >= 'A') && (text[i] <= 'Z')) | ((text[i] >= 'a') && (text[i] <= 'z'))) 
		{ 
			i++; 
		} 
		else 
		{ 
			text.erase(i, 1); 
		} 
	} 
	return string(text); 
} 

string Encode::Up(string text) 
{ 
	int i = 0; 
	while (text[i] != '\0') 
	{ 
		text[i] = toupper(text[i]); 
		i++; 
	} 
	return string(text); 
}



